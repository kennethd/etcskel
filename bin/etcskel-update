#!/bin/bash
# Copyright 2012 Kenneth Dombrowski <kenneth@ylayali.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Status messages go to STDERR and diffs to STDOUT, so you can do:
#
#   $ etcskel-update >/tmp/$LOGNAME-etcskel-update.diff
#
# to see status on console, while generating diff for review.
#
# Optional Argument
# =================
# $1: TARGET_DIR update a directory other than HOME
#
# Environment Variables
# =====================
# ETCSKEL_CONFIG: read config from file other than $HOME/etc/etcskel/config

die() { echo "$0: $*" >&2 ; exit 1 ; }
warn() { echo "$0: WARNING: $*" >&2 ; }
info() { echo "$0: $*" >&2 ; }
usage() {
    echo -e "$0 [-h] [-f] [target-dir]\n"
    echo "  target-dir defaults to HOME (allows root to update /etc/skel)"
    echo "  -f force overwrites everything"
}

##set -x

FORCE_OVERWRITE_ALL=
while getopts ":fh" opt
do
    case $opt in
        f)
            FORCE_OVERWRITE_ALL="yes"
            ;;
        h)
            usage
            exit 0
            ;;
        \?)
            die "unknown option: -$OPTARG"
            ;;
    esac
done
shift $((OPTIND-1))

TARGET_DIR="${1:-$HOME}"
if [ ! -d "$TARGET_DIR" ]
then
    mkdir -p "$TARGET_DIR" || die "could not create directory $TARGET_DIR"
fi
[ -w "$TARGET_DIR" ] || die "cannot write to target $TARGET_DIR"

ETCSKEL_CONFIG="${ETCSKEL_CONFIG:-$HOME/etc/etcskel/config}"
# all config options have defaults, lack of config is not fatal
[ -r "$ETCSKEL_CONFIG" ] && . "$ETCSKEL_CONFIG" || warn "cannot read config $ETCSKEL_CONFIG"

ETCSKEL_REMOTE_URL="${ETCSKEL_REMOTE_URL:-git://git.ylayali.net/etcskel.git}"

EXPORT_DIR=$( mktemp -d )
trap 'rm -rf "$EXPORT_DIR"' EXIT

git archive --remote="$ETCSKEL_REMOTE_URL" HEAD --format=tar | tar -C "$EXPORT_DIR" -xf -
SC=$? && [ $SC -eq 0 ] || die "git archive failed with exit status $SC"

cd "$EXPORT_DIR"
IFS='
'
FILES=$( find . -type f -print )

# create backup of files before continuing
# backup dir should not be effected by TARGET_DIR, but TARFILE name should be
ETCSKEL_BACKUP_DIR="${ETCSKEL_BACKUP_DIR:-$HOME/backups/etcskel}"
if [ ! -d "$ETCSKEL_BACKUP_DIR" ]
then
    mkdir -p "$ETCSKEL_BACKUP_DIR"
    SC=$? && [ $SC -eq 0 ] || die "mkdir $ETCSKEL_BACKUP_DIR failed with exit status $SC"
fi
if [ "$TARGET_DIR" = "$HOME" ]
then
    TARFILE="$ETCSKEL_BACKUP_DIR/etcskel-update-` date -I `.$$.tar.gz"
else
    # replace '/'s with '-'s
    DIR="${TARGET_DIR////-}" # /home/kenneth -> -home-kenneth
    TARFILE="$ETCSKEL_BACKUP_DIR/etcskel-update$DIR-` date -I `.$$.tar.gz"
fi
# -C tells tar to cd before executing so we grab files from $TARGET_DIR & not $EXPORT_DIR
# --ignore-failed-read does not fail when some files do not exist in $HOME
tar -C "$TARGET_DIR" --ignore-failed-read -czf "$TARFILE" ${FILES[@]} 2>/dev/null
SC=$? && [ $SC -eq 0 ] || die "create backup failed with exit status $SC"
# success, delete old backups
find "$ETCSKEL_BACKUP_DIR" -daystart -mtime +3 -type f -print0 | xargs -r -0 rm -f

for FILE in $FILES
do
    # remove leading ./
    FILE="${FILE##./}"
    # skip this condition if overwriting all.
    if [ "$FORCE_OVERWRITE_ALL" != "yes" ] || \
    ( \
        # DO NOT OVERWRITE files listed in no-overwrite UNLESS file does not
        # already exist on disk.  This is useful when installing things like
        # var/lib/logrotate/status which we will be passing control of to other
        # packages, and also provides mechanism to force update (via rm,mv,etc)
        [ -r "$TARGET_DIR/etc/etcskel/no-overwrite" ] \
        && grep -c "^$FILE[ \t]*\$" "$TARGET_DIR/etc/etcskel/no-overwrite" 2>&1 >/dev/null \
        && test -e "$TARGET_DIR/$FILE" \
    )
    then
        # if verbose show a diff of the two versions, if different
        if [ "" != "$ETCSKEL_UPDATE_VERBOSE" ]
        then
            if diff -q "./$FILE" "$TARGET_DIR/$FILE" 2>&1 >/dev/null
            then
                info "skipping $FILE [protected, unchanged]"
            else
                info "diff $FILE [protected, changed] NOT UPDATED"
                # send diffs to STDOUT, let STDERR be redirected to a log somewhere
                echo ""
                diff -c "./$FILE" "$TARGET_DIR/$FILE"
                echo ""
            fi
        fi
    else
        [ "" != "$ETCSKEL_UPDATE_VERBOSE" ] && info "writing $FILE"
        # if $FILE contains any path info, make sure directories exist
        RELPATH="${FILE%/*}"
        if [ "$FILE" != "$RELPATH" ]
        then
            mkdir -p "$TARGET_DIR/$RELPATH"
            SC=$? && [ $SC -eq 0 ] || die "mkdir $TARGET_DIR/$RELPATH failed with exit status $SC"
        fi
        cp "./$FILE" "$TARGET_DIR/$FILE"
        SC=$? && [ $SC -eq 0 ] || die "cp $FILE to $TARGET_DIR/$FILE failed with $SC"
    fi
done

# delete files since removed from the repo, if not protected
IFS='
'
DELETE_OLD_PATHS=( $( < "$TARGET_DIR/etc/etcskel/delete-old-paths" ) )
for FILE in ${DELETE_OLD_PATHS[*]}
do
    # skip comments & blank lines
    echo "$FILE" | grep -E '^[ \t]*#|^[ \t]*$' >/dev/null && continue
    # configured to leave file alone?
    if [ -r "$TARGET_DIR/etc/etcskel/no-overwrite" ] \
        && grep -c "^$FILE[ \t]*\$" "$TARGET_DIR/etc/etcskel/no-overwrite" 2>&1 >/dev/null \
        && test -e "$TARGET_DIR/$FILE"
    then
        info "skipping $FILE [deprecated but protected]"
    # else, if file exists try to delete it
    elif [ -e "$TARGET_DIR/$FILE" ]
    then
        if [ -f "$TARGET_DIR/$FILE" ]
        then
            info "deleting file $FILE [deprecated]"
            rm -f "$TARGET_DIR/$FILE" # --interactive=never
        elif [ -d "$TARGET_DIR/$FILE" ]
        then
            info "deleting dir $FILE [deprecated]"
            rmdir "$TARGET_DIR/$FILE"
        elif [ -h "$TARGET_DIR/$FILE" ]
        then
            info "removing link $FILE [deprecated]"
            unlink "$TARGET_DIR/$FILE"
        else
            info "trying to remove special file $FILE [deprecated]"
            rm -f "$TARGET_DIR/$FILE" # --interactive=never
        fi
    fi
done

exit 0
