#!/bin/bash
# Copyright 2012 Kenneth Dombrowski <kenneth@ylayali.net>
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##set -x
[ -r "$HOME/etc/etcskel/config" ] && . "$HOME/etc/etcskel/config"
ETCSKEL_REMOTE_URL="${ETCSKEL_REMOTE_URL:-git://git.ylayali.net/etcskel.git}"

EXPORT_DIR=$( mktemp -d )
trap 'rm -rf "$EXPORT_DIR"' EXIT

git archive --remote="$ETCSKEL_REMOTE_URL" HEAD --format=tar | tar -C "$EXPORT_DIR" -xf -
[ $? -ne 0 ] && exit $?

cd "$EXPORT_DIR"
# TODO: test with filename containing spaces
IFS='
'
FILES=$( find . -type f -print )

# create backup of files before continuing
ETCSKEL_BACKUP_DIR="${ETCSKEL_BACKUP_DIR:-$HOME/backups/etcskel}"
if [ ! -d "$ETCSKEL_BACKUP_DIR" ]
then
    mkdir -p "$ETCSKEL_BACKUP_DIR"
    [ $? -ne 0 ] && exit $?
fi
TARFILE="$ETCSKEL_BACKUP_DIR/etcskel-update-` date -I `.$$.tar.gz"
# -C tells tar to cd before executing so we grab files from $HOME & not $EXPORT_DIR
# --ignore-failed-read does not fail when some files do not exist in $HOME
tar -C "$HOME" --ignore-failed-read -czf "$TARFILE" ${FILES[@]} 2>/dev/null
[ $? -ne 0 ] && exit $?
# success, delete old backups
find "$ETCSKEL_BACKUP_DIR" -daystart -mtime +3 -type f -print0 | xargs -r -0 rm -f

for FILE in $FILES
do
    # remove leading ./
    FILE="${FILE##./}"
    # DO NOT OVERWRITE files listed in no-overwrite UNLESS file does not
    # already exist on disk.  This is useful when installing things like
    # var/lib/logrotate/status which we will be passing control of to other
    # packages, and also provides mechanism to force update (via rm,mv,etc) 
    if grep -c "^$FILE[ \t]*\$" "$HOME/etc/etcskel/no-overwrite" 2>&1 >/dev/null && test -e "$HOME/$FILE"
    then
        # if verbose show a diff of the two versions, if different
        if [ "" != "$ETCSKEL_UPDATE_VERBOSE" ]
        then
            if diff -q "./$FILE" "$HOME/$FILE" 2>&1 >/dev/null
            then
                echo "$0: skipping $FILE [protected, unchanged]" >&2
            else
                echo "$0: diff $FILE [protected, changed] NOT UPDATED" >&2
                # send diffs to STDOUT, let STDERR be redirected to a log somewhere
                echo ""
                diff -c "./$FILE" "$HOME/$FILE"
                echo ""
            fi
        fi
    else
        [ "" != "$ETCSKEL_UPDATE_VERBOSE" ] && echo "$0: writing $FILE" >&2
        # if $FILE contains any path info, make sure directories exist
        RELPATH="${FILE%/*}"
        if [ "$FILE" != "$RELPATH" ]
        then
            mkdir -p "$HOME/$RELPATH"
            [ $? -ne 0 ] && exit $?
        fi
        cp "./$FILE" "$HOME/$FILE"
    fi
done

# delete files since removed from the repo, if not protected
DELETE_OLD_PATHS=( < "$HOME/etc/etcskel/delete-old-paths" )
for FILE in $DELETE_OLD_PATHS
do
    if grep -c "^$FILE[ \t]*\$" "$HOME/etc/etcskel/no-overwrite" 2>&1 >/dev/null && test -e "$HOME/$FILE"
    then
        echo "$0: skipping $FILE [DEPRECATED but protected]" >&2
    else
        if [ -f "$FILE" ]
        then
            echo "$0: deleting file $FILE [deprecated]" >&2
            rm -f "$FILE" # --interactive=never
        elif [ -d "$FILE" ]
        then
            echo "$0: deleting dir $FILE [deprecated]" >&2
            rmdir "$FILE"
        elif [ -h "$FILE" ]
        then
            echo "$0: removing link $FILE [deprecated]" >&2
            unlink "$FILE"
        elif [ -e "$FILE" ]
        then
            echo "$0: trying to remove special file $FILE [deprecated]" >&2
            rm -f "$FILE" # --interactive=never
        fi
    fi
done

exit 0
