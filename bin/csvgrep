#!/usr/bin/env python2.7

# Extract specified columns from CSV/TSV files

import argparse
import csv
import re
import sys

parser = argparse.ArgumentParser(description='Print column(s) from csv/tsv file to STDOUT, optionally restricting to regex match')
parser.add_argument('--tab', dest='field_sep', action="store_const", const="\t", help='Use TAB as field spec char')
parser.add_argument('--comma', dest='field_sep', action="store_const", const=",", help='Use "," as field spec char')
parser.add_argument('--delimiter', default=" ", help="Output delimiter used to join fields matching colspec")
parser.add_argument('--skip-empty', action='store_true', help="Skip outputting rows for which none of colspec had a value")
parser.add_argument('--skip-header', action='store_true', help="Skip first row (often a header)")
parser.add_argument('--colspec', dest='colspec', help='Colspec (string of col indexes, comma/space separated, with range support): "0 1,3,5 4-6,9,13"')
parser.add_argument('--grep', dest='grepstr', help='Python regex to search for in colspec columns.  If provided, only matching rows are printed with info about where the match was found, if omitted, all values from colspec are printed to STDOUT.')
parser.add_argument('file', nargs='+')
args = parser.parse_args()

cols = []
# split input colspec @ whitespace, join with commas, then split @ all commas
RE_COLSPEC_SPLIT = re.compile(r'\s+')
colspec = ",".join(RE_COLSPEC_SPLIT.split(args.colspec)).split(",")
# ['1', '3', '5', '9-11', '7', '13-15']
for cs in colspec:
    try:
        cols.append(int(cs))
    except ValueError:
        (start, end) = cs.split("-", 1)
        cols.extend(range(int(start), int(end) + 1) )
colspec = sorted(cols)
assert colspec, "invalid --colspec"

grep_for_value = False
if args.grepstr:
    grep_for_value = True
    RE_GREP = re.compile(r'{}'.format(args.grepstr))

for f in args.file:
    line_count = 0
    with open(f, 'rb') as fh:
        reader = csv.reader(fh, delimiter=args.field_sep)
        for row in reader:
            line_count = line_count + 1
            row_cols = []
            for (i, c) in enumerate(row):
                if i in colspec:
                    if grep_for_value:
                        if RE_GREP.search(c):
                            row_cols = (f, str(line_count), c)
                    else:
                        # no grep, just print all values from colspec
                        row_cols.append(c)

            if grep_for_value:
                # force each match to newline with prefix similar to grep:
                # ./path/to/file:lineno:{match}
                if row_cols:
                    print >> sys.stdout, ":".join(row_cols)
            else:
                if row_cols or not args['skip-empty']:
                    print >> sys.stdout, args.delimiter.join(row_cols)

sys.exit(0)
