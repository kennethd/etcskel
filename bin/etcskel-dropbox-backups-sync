#!/usr/bin/env python

import getpass
import os
import pprint
import socket
import sys

from dropbox import client, rest, session

APP_KEY = 'vj4w6crqavd8v3r' # etcskel-backups app key
APP_SECRET = 'hkmmuwgrxrfo0gn' # etcskel-backups secret
ACCESS_TYPE = 'app_folder'  # should be 'dropbox' or 'app_folder' as configured for your app
TOKEN_FILE = os.path.expanduser('~/.etcskel-backups.dropbox.token')
BACKUP_DIR_LIST = os.path.expanduser('~/etc/etcskel/dropbox-sync-dirs')
CHUNK_THRESHHOLD = 20 * 1024 * 1024 # files > 20mb will use chunked upload

def command(login_required=True):
    """a decorator for handling authentication and exceptions"""
    def decorate(f):
        def wrapper(self, *args):
            if login_required and not self.sess.is_linked():
                print >> sys.stderr , "Please run 'etcskel-dropbox-term' and 'login' to grant access to your dropbox"
                return
            return f(self, *args)
        wrapper.__doc__ = f.__doc__
        return wrapper
    return decorate

class Dropbox():
    def __init__(self, app_key, app_secret):
        self.sess = session.DropboxSession(APP_KEY, APP_SECRET, ACCESS_TYPE)
        try:
            stored_creds = open(TOKEN_FILE).read()
            self.sess.set_token(*stored_creds.split('|'))
        except IOError:
            print >> sys.stderr , 'Error: dropbox token file not found:', TOKEN_FILE
        self.api_client = client.DropboxClient(self.sess)
        self.current_path = ''

    @command()
    def do_ls(self):
        """list files in current remote directory"""
        dirlist = []
        resp = self.api_client.metadata(self.current_path)
        if 'contents' in resp:
            for f in resp['contents']:
                name = os.path.basename(f['path'])
                #encoding = locale.getdefaultlocale()[1]
                dirlist.append(name)
        return dirlist

    @command()
    def do_cd(self, path):
        """change current working directory"""
        if path == "..":
            self.current_path = "/".join(self.current_path.split("/")[0:-1])
        else:
            self.current_path += "/" + path

    @command(login_required=False)
    def do_login(self):
        """log in to a Dropbox account"""
        try:
            self.sess.link()
        except rest.ErrorResponse, ex:
            print >> sys.stderr , 'Error: %s' % (str(ex),)

    @command()
    def do_logout(self):
        """log out of the current Dropbox account"""
        self.sess.unlink()
        self.current_path = ''

    @command()
    def do_cat(self, path):
        """display the contents of a file"""
        f, metadata = self.api_client.get_file_and_metadata(self.current_path + "/" + path)
        return f.read()

    @command()
    def do_mkdir(self, path):
        """create a new directory"""
        self.api_client.file_create_folder(self.current_path + "/" + path)

    @command()
    def do_rm(self, path):
        """delete a file or directory"""
        self.api_client.file_delete(self.current_path + "/" + path)

    @command()
    def do_mv(self, from_path, to_path):
        """move/rename a file or directory"""
        self.api_client.file_move(self.current_path + "/" + from_path,
                                  self.current_path + "/" + to_path)

    @command()
    def do_account_info(self):
        """display account information"""
        f = self.api_client.account_info()
        pprint.PrettyPrinter(indent=2).pprint(f)

    @command(login_required=False)
    def do_exit(self):
        """exit"""
        return True

    @command()
    def do_get(self, from_path, to_path):
        """
        Copy file from Dropbox to local file and print out out the metadata.

        Examples:
        Dropbox> get file.txt ~/dropbox-file.txt
        """
        to_file = open(os.path.expanduser(to_path), "wb")
        f, metadata = self.api_client.get_file_and_metadata(self.current_path + "/" + from_path)
        print >> sys.stderr , 'Metadata:', metadata
        to_file.write(f.read())

    @command()
    def do_thumbnail(self, from_path, to_path, size='large', format='JPEG'):
        """
        Copy an image file's thumbnail to a local file and print out the
        file's metadata.

        Examples:
        Dropbox> thumbnail file.txt ~/dropbox-file.txt medium PNG
        """
        to_file = open(os.path.expanduser(to_path), "wb")
        f, metadata = self.api_client.thumbnail_and_metadata(
                self.current_path + "/" + from_path, size, format)
        print >> sys.stderr , 'Metadata:', metadata
        to_file.write(f.read())

    @command()
    def do_put(self, from_path, to_path):
        """
        Copy local file to Dropbox

        Examples:
        Dropbox> put ~/test.txt dropbox-copy-test.txt
        """
        from_file = open(os.path.expanduser(from_path), "rb")
        try:
            file_size = os.path.getsize(from_path)
        except OSError as ex:
            print >> sys.stderr , 'Error: ', str(ex)
            return False

        if file_size < CHUNK_THRESHHOLD:
            self.api_client.put_file(self.current_path + "/" + to_path, from_file)
        else:
            uploader = self.api_client.get_chunked_uploader(from_file, file_size)
            print >> sys.stderr , "uploading: ", from_file, file_size
            while uploader.offset < file_size:
                try:
                    upload = uploader.upload_chunked()
                except rest.ErrorResponse, e:
                    # TODO: perform error handling and retry logic
                    print >> sys.stderr , 'Error uploading chunked file', from_path
                    return False
            uploader.finish(self.current_path + "/" + to_path)
        return True

    @command()
    def do_search(self, string):
        """Search Dropbox for filenames containing the given string."""
        found = []
        results = self.api_client.search(self.current_path, string)
        for r in results:
            found.append(r['path'])
        return found

    @command(login_required=False)
    def do_help(self):
        # Find every "do_" attribute with a non-empty docstring and print
        # out the docstring.
        all_names = dir(self)
        cmd_names = []
        for name in all_names:
            if name[:3] == 'do_':
                cmd_names.append(name[3:])
        cmd_names.sort()
        for cmd_name in cmd_names:
            f = getattr(self, 'do_' + cmd_name)
            if f.__doc__:
                print >> sys.stdout , '%s: %s' % (cmd_name, f.__doc__)

if __name__ == '__main__':

    # exit silently if TOKEN_FILE does not exist, user has not authenticated us
    try:
        with open(TOKEN_FILE) as token_file:
            pass
    except IOError as ex:
        print >> sys.stderr , 'Error: %s' % (str(ex),)
        print >> sys.stderr , "Please run 'etcskel-dropbox-term' and 'login' to grant access to your dropbox"
        sys.exit(0)

    backup_dirs = []
    dir_specs = []
    try:
        with open(BACKUP_DIR_LIST) as backup_dir_list:
            dir_specs = backup_dir_list.readlines()
    except IOError as ex:
        print >> sys.stderr , 'Error: %s' % (str(ex),)
        sys.exit(0)

    for dir_spec in dir_specs:
        dir_spec = dir_spec.strip()
        if os.path.isdir(dir_spec):
            backup_dirs.append(dir_spec)
        elif os.path.isdir(os.path.expanduser(dir_spec)):
            backup_dirs.append(os.path.expanduser(dir_spec))
        elif os.path.isdir(os.path.expanduser('~' + dir_spec)):
            backup_dirs.append(os.path.expanduser('~' + dir_spec))

    dropbox = Dropbox(APP_KEY, APP_SECRET)

    # each host using etcskel-backups manages its own directory
    my_hostname = socket.gethostname()
    try:
        ret = dropbox.do_mkdir(my_hostname)
    except rest.ErrorResponse, ex:
        if ex.status == 403:
            # 'The folder 'gilgamesh' already exists.'
            pass
        else:
            print >> sys.stderr , 'Error: ', str(ex)
            sys.exit(1)
    dropbox.do_cd(my_hostname)

    for backup_dir in backup_dirs:
        print >> sys.stderr , 'sync', backup_dir
        remote_dir = backup_dir.replace('/', '-').lstrip('-')

        try:
            ret = dropbox.do_mkdir(remote_dir)
        except rest.ErrorResponse, ex:
            if ex.status == 403:
                pass
            else:
                print >> sys.stderr , 'Error: ', str(ex)
                sys.exit(1)
        dropbox.do_cd(remote_dir)

        local_files = set(os.listdir(backup_dir))
        remote_files = set(dropbox.do_ls())

        # remove remote files that no longer exist on disk here
        rm_files = remote_files.difference(local_files)
        for rm_file in rm_files:
            print >> sys.stderr , 'rm', rm_file
            dropbox.do_rm(rm_file)
        # upload local files that do not exist remotely
        put_files = local_files.difference(remote_files)
        # TODO: large files fail with error
        # dropbox.rest.RESTSocketError: Error connecting to "api-content.dropbox.com": [Errno 32] Broken pipe 
        for put_file in put_files:
            print >> sys.stderr , 'put', put_file
            dropbox.do_put(os.path.sep.join([backup_dir, put_file]), put_file)
        dropbox.do_cd('..')

